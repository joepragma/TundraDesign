// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaTypesDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_Services& Lhs, const FPragma_Services& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Services == Rhs.Services
;
}
bool operator!=(const FPragma_Services& Lhs, const FPragma_Services& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_IntAny& Lhs, const FPragma_IntAny& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Type == Rhs.Type
			&& Lhs.Bytes == Rhs.Bytes
;
}
bool operator!=(const FPragma_IntAny& Lhs, const FPragma_IntAny& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Fixed128& Lhs, const FPragma_Fixed128& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Lsb == Rhs.Lsb
			&& Lhs.Msb == Rhs.Msb
;
}
bool operator!=(const FPragma_Fixed128& Lhs, const FPragma_Fixed128& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_ServiceInstance& Lhs, const FPragma_ServiceInstance& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Name == Rhs.Name
			&& Lhs.InstanceId == Rhs.InstanceId
;
}
bool operator!=(const FPragma_ServiceInstance& Lhs, const FPragma_ServiceInstance& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_ServicesInstances& Lhs, const FPragma_ServicesInstances& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Instances == Rhs.Instances
;
}
bool operator!=(const FPragma_ServicesInstances& Lhs, const FPragma_ServicesInstances& Rhs)
{
	return !(Lhs == Rhs);
}
