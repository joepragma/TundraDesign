// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaPlayerDataServiceRpcDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_PlayerData_DeletePartnerV1Response& Lhs, const FPragma_PlayerData_DeletePartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_PlayerData_DeletePartnerV1Response& Lhs, const FPragma_PlayerData_DeletePartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_DeletePartnerV1Request& Lhs, const FPragma_PlayerData_DeletePartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
;
}
bool operator!=(const FPragma_PlayerData_DeletePartnerV1Request& Lhs, const FPragma_PlayerData_DeletePartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_GetPartnerV1Response& Lhs, const FPragma_PlayerData_GetPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerData == Rhs.PlayerData
;
}
bool operator!=(const FPragma_PlayerData_GetPartnerV1Response& Lhs, const FPragma_PlayerData_GetPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_GetPartnerV1Request& Lhs, const FPragma_PlayerData_GetPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
;
}
bool operator!=(const FPragma_PlayerData_GetPartnerV1Request& Lhs, const FPragma_PlayerData_GetPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_GetV1Response& Lhs, const FPragma_PlayerData_GetV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerData == Rhs.PlayerData
;
}
bool operator!=(const FPragma_PlayerData_GetV1Response& Lhs, const FPragma_PlayerData_GetV1Response& Rhs)
{
	return !(Lhs == Rhs);
}

FPragma_PlayerData_GetV1Request_CurrentVersion::FPragma_PlayerData_GetV1Request_CurrentVersion() {}
FPragma_PlayerData_GetV1Request_CurrentVersion::~FPragma_PlayerData_GetV1Request_CurrentVersion()
{
	Reset();
}

FPragma_PlayerData_GetV1Request_CurrentVersion::FPragma_PlayerData_GetV1Request_CurrentVersion(const FPragma_PlayerData_GetV1Request_CurrentVersion& Other)
{
	*this = Other;
}

bool FPragma_PlayerData_GetV1Request_CurrentVersion::Equals(const FPragma_PlayerData_GetV1Request_CurrentVersion& Other) const
{
	if (!HasValue() && !Other.HasValue())
	{
		return true;
	}
	if (HasValue() != Other.HasValue())
	{
		return false;
	}
	return *ValuePtr == *Other.ValuePtr;
}

FPragma_PlayerData_GetV1Request_CurrentVersion& FPragma_PlayerData_GetV1Request_CurrentVersion::operator=(const FPragma_PlayerData_GetV1Request_CurrentVersion& Other)
{
	if (Other.HasValue())
	{
		SetValue(Other.Value());
	}
	else
	{
		Reset();
	}
	return *this;
}

void FPragma_PlayerData_GetV1Request_CurrentVersion::Reset()
{
	ValuePtr.Reset();
}

const int32& FPragma_PlayerData_GetV1Request_CurrentVersion::Value() const {
	checkf(HasValue(), TEXT("Failed to retrieve CurrentVersion from FPragma_PlayerData_GetV1Request_CurrentVersion. Check HasValue() first."));
	return *ValuePtr;
}

void FPragma_PlayerData_GetV1Request_CurrentVersion::SetValue(const int32& Value)
{
	ValuePtr.Reset(new int32{Value});
}

bool FPragma_PlayerData_GetV1Request_CurrentVersion::SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	const FPragma_PlayerData_GetV1Request_CurrentVersion& Optional = static_cast<const FPragma_PlayerData_GetV1Request*>(Value)->CurrentVersion;
	if (Optional.HasValue())
	{
		OutJsonObj->SetField("currentVersion", PragmaJson::Int32ToJsonValue(Optional.Value()));
	}
	return true;
}
bool FPragma_PlayerData_GetV1Request_CurrentVersion::DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	FPragma_PlayerData_GetV1Request_CurrentVersion& OutOptional = static_cast<FPragma_PlayerData_GetV1Request*>(OutValue)->CurrentVersion;
	if (JsonObj->HasField("currentVersion"))
	{
		OutOptional.ValuePtr.Reset(new int32{PragmaJson::JsonValueToInt32(JsonObj->TryGetField(TEXT("currentVersion")).ToSharedRef())});
	}
	return true;
}

bool operator==(const FPragma_PlayerData_GetV1Request_CurrentVersion& Lhs, const FPragma_PlayerData_GetV1Request_CurrentVersion& Rhs)
{
	return Lhs.Equals(Rhs);
}
bool operator!=(const FPragma_PlayerData_GetV1Request_CurrentVersion& Lhs, const FPragma_PlayerData_GetV1Request_CurrentVersion& Rhs)
{
	return !(Lhs == Rhs);
}


bool FPragma_PlayerData_GetV1Request::AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	bool Success = true;
	Success &= FPragma_PlayerData_GetV1Request_CurrentVersion::SerializeIntoParentJson(Value, OutJsonObj);
	return Success;
}

bool FPragma_PlayerData_GetV1Request::AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	bool Success = true;
	Success &= FPragma_PlayerData_GetV1Request_CurrentVersion::DeserializeFromParentJson(JsonObj, OutValue);
	return Success;
}

bool operator==(const FPragma_PlayerData_GetV1Request& Lhs, const FPragma_PlayerData_GetV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CurrentVersion == Rhs.CurrentVersion
;
}
bool operator!=(const FPragma_PlayerData_GetV1Request& Lhs, const FPragma_PlayerData_GetV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_DoOperationPartnerV1Response& Lhs, const FPragma_PlayerData_DoOperationPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Ext == Rhs.Ext
;
}
bool operator!=(const FPragma_PlayerData_DoOperationPartnerV1Response& Lhs, const FPragma_PlayerData_DoOperationPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_DoOperationPartnerV1Request& Lhs, const FPragma_PlayerData_DoOperationPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.Ext == Rhs.Ext
;
}
bool operator!=(const FPragma_PlayerData_DoOperationPartnerV1Request& Lhs, const FPragma_PlayerData_DoOperationPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_PlayerDataUpdateSummary& Lhs, const FPragma_PlayerData_PlayerDataUpdateSummary& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ChangedEntities == Rhs.ChangedEntities
			&& Lhs.DeletedEntities == Rhs.DeletedEntities
			&& Lhs.Version == Rhs.Version
;
}
bool operator!=(const FPragma_PlayerData_PlayerDataUpdateSummary& Lhs, const FPragma_PlayerData_PlayerDataUpdateSummary& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_PlayerDataUpdatedV1Notification& Lhs, const FPragma_PlayerData_PlayerDataUpdatedV1Notification& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.UpdateSummary == Rhs.UpdateSummary
;
}
bool operator!=(const FPragma_PlayerData_PlayerDataUpdatedV1Notification& Lhs, const FPragma_PlayerData_PlayerDataUpdatedV1Notification& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_DoOperationV1Response& Lhs, const FPragma_PlayerData_DoOperationV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Ext == Rhs.Ext
			&& Lhs.UpdateSummary == Rhs.UpdateSummary
;
}
bool operator!=(const FPragma_PlayerData_DoOperationV1Response& Lhs, const FPragma_PlayerData_DoOperationV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_PlayerData_DoOperationV1Request& Lhs, const FPragma_PlayerData_DoOperationV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Ext == Rhs.Ext
;
}
bool operator!=(const FPragma_PlayerData_DoOperationV1Request& Lhs, const FPragma_PlayerData_DoOperationV1Request& Rhs)
{
	return !(Lhs == Rhs);
}
