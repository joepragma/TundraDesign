// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.h.mustache
// </auto-generated>
#pragma once

#include "CoreMinimal.h"
#include "Dom/JsonObject.h"
#include "Dto/PragmaTypesDto.h"
#include "Dto/PragmaOptionsDto.h"
#include "Dto/PragmaInventoryContentExtDto.h"
#include "Dto/PragmaInventoryExtDto.h"
#include "Dto/PragmaInventoryRpcExtDto.h"

#include "PragmaInventoryCommonDto.generated.h"

// Forward declarations.
struct FPragma_Inventory_PurchaseRequirements;
struct FPragma_Inventory_CostEntry;
struct FPragma_Inventory_AnnotatedStoreEntry;
struct FPragma_Inventory_AnnotatedStore;
struct FPragma_Inventory_RewardGrant;
struct FPragma_Inventory_ServerInstancedItemUpdate;
struct FPragma_Inventory_StackableItemUpdate;
struct FPragma_Inventory_ServerItemUpdateV2;
struct FPragma_Inventory_InstancedItemUpdate;
struct FPragma_Inventory_ItemUpdateV2;
struct FPragma_Inventory_InstancedItemServerDestroy;
struct FPragma_Inventory_ItemServerDestroyV1;
struct FPragma_Inventory_ItemBundleGrant;
struct FPragma_Inventory_StackableItemGrant;
struct FPragma_Inventory_InstancedItemServerGrant;
struct FPragma_Inventory_ItemServerGrantV1;
struct FPragma_Inventory_InstancedItem;
struct FPragma_Inventory_StackableItem;

//
// Source protos:
// pragma/inventory/inventoryCommon.proto
//


USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_PurchaseRequirements
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_ExtPurchaseRequirements Ext;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> RequiredCatalogIds;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_PurchaseRequirements& Lhs, const FPragma_Inventory_PurchaseRequirements& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_PurchaseRequirements& Lhs, const FPragma_Inventory_PurchaseRequirements& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_CostEntry
{
	GENERATED_BODY()

	UPROPERTY()
	int64 Cost{0};

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_CostEntry& Lhs, const FPragma_Inventory_CostEntry& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_CostEntry& Lhs, const FPragma_Inventory_CostEntry& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_AnnotatedStoreEntry
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString Id;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TMap<FString, int64> ReceivedQuantityByCatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TMap<FString, FPragma_Inventory_CostEntry> CostByCatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_PurchaseRequirements Requirements;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	bool CanPurchase{false};

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_AnnotatedStoreEntry& Lhs, const FPragma_Inventory_AnnotatedStoreEntry& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_AnnotatedStoreEntry& Lhs, const FPragma_Inventory_AnnotatedStoreEntry& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_AnnotatedStore
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString Id;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString Name;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FPragma_Inventory_AnnotatedStoreEntry> StoreEntries;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_AnnotatedStore& Lhs, const FPragma_Inventory_AnnotatedStore& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_AnnotatedStore& Lhs, const FPragma_Inventory_AnnotatedStore& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_RewardGrant
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString TableId;

	UPROPERTY()
	int64 Count{0};

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_RewardGrant& Lhs, const FPragma_Inventory_RewardGrant& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_RewardGrant& Lhs, const FPragma_Inventory_RewardGrant& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ServerInstancedItemUpdate
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_ExtInstancedItemServerUpdate RequestExt;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString UpdateEntryId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ServerInstancedItemUpdate& Lhs, const FPragma_Inventory_ServerInstancedItemUpdate& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ServerInstancedItemUpdate& Lhs, const FPragma_Inventory_ServerInstancedItemUpdate& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_StackableItemUpdate
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString CatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

	UPROPERTY()
	int64 AmountChanged{0};

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_StackableItemUpdate& Lhs, const FPragma_Inventory_StackableItemUpdate& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_StackableItemUpdate& Lhs, const FPragma_Inventory_StackableItemUpdate& Rhs);

UENUM(BlueprintType, Category=Pragma)
enum class EPragma_Inventory_ServerItemUpdateV2_ItemType : uint8
{
	Invalid,
	Instanced,
	Stackable,
};

USTRUCT(BlueprintType, Category=Pragma)
struct PRAGMASDK_API FPragma_Inventory_ServerItemUpdateV2_Item
{
	GENERATED_BODY()

	FPragma_Inventory_ServerItemUpdateV2_Item();
	~FPragma_Inventory_ServerItemUpdateV2_Item();

	FPragma_Inventory_ServerItemUpdateV2_Item(const FPragma_Inventory_ServerItemUpdateV2_Item& Other);
	FPragma_Inventory_ServerItemUpdateV2_Item& operator=(const FPragma_Inventory_ServerItemUpdateV2_Item& Other);

    bool Equals(const FPragma_Inventory_ServerItemUpdateV2_Item& Other) const;

	void Reset();

	EPragma_Inventory_ServerItemUpdateV2_ItemType OneOfType() const { return Type; }

	const FPragma_Inventory_ServerInstancedItemUpdate& Instanced() const;
	const FPragma_Inventory_StackableItemUpdate& Stackable() const;

    void SetInstanced(const FPragma_Inventory_ServerInstancedItemUpdate& Value);
    void SetStackable(const FPragma_Inventory_StackableItemUpdate& Value);

	static bool SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
	static bool DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);

private:
	UPROPERTY()
	EPragma_Inventory_ServerItemUpdateV2_ItemType Type { EPragma_Inventory_ServerItemUpdateV2_ItemType::Invalid };

	union
	{
		TTypeCompatibleBytes<FPragma_Inventory_ServerInstancedItemUpdate> Instanced;
		TTypeCompatibleBytes<FPragma_Inventory_StackableItemUpdate> Stackable;
	} Union{};
};
bool operator==(const FPragma_Inventory_ServerItemUpdateV2_Item& Lhs, const FPragma_Inventory_ServerItemUpdateV2_Item& Rhs);
bool operator!=(const FPragma_Inventory_ServerItemUpdateV2_Item& Lhs, const FPragma_Inventory_ServerItemUpdateV2_Item& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ServerItemUpdateV2
{
	GENERATED_BODY()

	UPROPERTY(Transient)
	FPragma_Inventory_ServerItemUpdateV2_Item Item;

    PRAGMASDK_API static bool AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
    PRAGMASDK_API static bool AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);
};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ServerItemUpdateV2& Lhs, const FPragma_Inventory_ServerItemUpdateV2& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ServerItemUpdateV2& Lhs, const FPragma_Inventory_ServerItemUpdateV2& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_InstancedItemUpdate
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_ExtInstancedItemUpdate Ext;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString UpdateEntryId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_InstancedItemUpdate& Lhs, const FPragma_Inventory_InstancedItemUpdate& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_InstancedItemUpdate& Lhs, const FPragma_Inventory_InstancedItemUpdate& Rhs);

UENUM(BlueprintType, Category=Pragma)
enum class EPragma_Inventory_ItemUpdateV2_ItemType : uint8
{
	Invalid,
	Instanced,
	Stackable,
};

USTRUCT(BlueprintType, Category=Pragma)
struct PRAGMASDK_API FPragma_Inventory_ItemUpdateV2_Item
{
	GENERATED_BODY()

	FPragma_Inventory_ItemUpdateV2_Item();
	~FPragma_Inventory_ItemUpdateV2_Item();

	FPragma_Inventory_ItemUpdateV2_Item(const FPragma_Inventory_ItemUpdateV2_Item& Other);
	FPragma_Inventory_ItemUpdateV2_Item& operator=(const FPragma_Inventory_ItemUpdateV2_Item& Other);

    bool Equals(const FPragma_Inventory_ItemUpdateV2_Item& Other) const;

	void Reset();

	EPragma_Inventory_ItemUpdateV2_ItemType OneOfType() const { return Type; }

	const FPragma_Inventory_InstancedItemUpdate& Instanced() const;
	const FPragma_Inventory_StackableItemUpdate& Stackable() const;

    void SetInstanced(const FPragma_Inventory_InstancedItemUpdate& Value);
    void SetStackable(const FPragma_Inventory_StackableItemUpdate& Value);

	static bool SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
	static bool DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);

private:
	UPROPERTY()
	EPragma_Inventory_ItemUpdateV2_ItemType Type { EPragma_Inventory_ItemUpdateV2_ItemType::Invalid };

	union
	{
		TTypeCompatibleBytes<FPragma_Inventory_InstancedItemUpdate> Instanced;
		TTypeCompatibleBytes<FPragma_Inventory_StackableItemUpdate> Stackable;
	} Union{};
};
bool operator==(const FPragma_Inventory_ItemUpdateV2_Item& Lhs, const FPragma_Inventory_ItemUpdateV2_Item& Rhs);
bool operator!=(const FPragma_Inventory_ItemUpdateV2_Item& Lhs, const FPragma_Inventory_ItemUpdateV2_Item& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ItemUpdateV2
{
	GENERATED_BODY()

	UPROPERTY(Transient)
	FPragma_Inventory_ItemUpdateV2_Item Item;

    PRAGMASDK_API static bool AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
    PRAGMASDK_API static bool AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);
};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ItemUpdateV2& Lhs, const FPragma_Inventory_ItemUpdateV2& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ItemUpdateV2& Lhs, const FPragma_Inventory_ItemUpdateV2& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_InstancedItemServerDestroy
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_InstancedItemServerDestroy& Lhs, const FPragma_Inventory_InstancedItemServerDestroy& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_InstancedItemServerDestroy& Lhs, const FPragma_Inventory_InstancedItemServerDestroy& Rhs);

UENUM(BlueprintType, Category=Pragma)
enum class EPragma_Inventory_ItemServerDestroyV1_ItemType : uint8
{
	Invalid,
	Instanced,
};

USTRUCT(BlueprintType, Category=Pragma)
struct PRAGMASDK_API FPragma_Inventory_ItemServerDestroyV1_Item
{
	GENERATED_BODY()

	FPragma_Inventory_ItemServerDestroyV1_Item();
	~FPragma_Inventory_ItemServerDestroyV1_Item();

	FPragma_Inventory_ItemServerDestroyV1_Item(const FPragma_Inventory_ItemServerDestroyV1_Item& Other);
	FPragma_Inventory_ItemServerDestroyV1_Item& operator=(const FPragma_Inventory_ItemServerDestroyV1_Item& Other);

    bool Equals(const FPragma_Inventory_ItemServerDestroyV1_Item& Other) const;

	void Reset();

	EPragma_Inventory_ItemServerDestroyV1_ItemType OneOfType() const { return Type; }

	const FPragma_Inventory_InstancedItemServerDestroy& Instanced() const;

    void SetInstanced(const FPragma_Inventory_InstancedItemServerDestroy& Value);

	static bool SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
	static bool DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);

private:
	UPROPERTY()
	EPragma_Inventory_ItemServerDestroyV1_ItemType Type { EPragma_Inventory_ItemServerDestroyV1_ItemType::Invalid };

	union
	{
		TTypeCompatibleBytes<FPragma_Inventory_InstancedItemServerDestroy> Instanced;
	} Union{};
};
bool operator==(const FPragma_Inventory_ItemServerDestroyV1_Item& Lhs, const FPragma_Inventory_ItemServerDestroyV1_Item& Rhs);
bool operator!=(const FPragma_Inventory_ItemServerDestroyV1_Item& Lhs, const FPragma_Inventory_ItemServerDestroyV1_Item& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ItemServerDestroyV1
{
	GENERATED_BODY()

	UPROPERTY(Transient)
	FPragma_Inventory_ItemServerDestroyV1_Item Item;

    PRAGMASDK_API static bool AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
    PRAGMASDK_API static bool AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);
};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ItemServerDestroyV1& Lhs, const FPragma_Inventory_ItemServerDestroyV1& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ItemServerDestroyV1& Lhs, const FPragma_Inventory_ItemServerDestroyV1& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ItemBundleGrant
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString Id;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ItemBundleGrant& Lhs, const FPragma_Inventory_ItemBundleGrant& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ItemBundleGrant& Lhs, const FPragma_Inventory_ItemBundleGrant& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_StackableItemGrant
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString CatalogId;

	UPROPERTY()
	int64 Amount{0};

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_StackableItemGrant& Lhs, const FPragma_Inventory_StackableItemGrant& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_StackableItemGrant& Lhs, const FPragma_Inventory_StackableItemGrant& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_InstancedItemServerGrant
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_ExtInstancedItemServerGrant Ext;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString CatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	TArray<FString> Tags;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_InstancedItemServerGrant& Lhs, const FPragma_Inventory_InstancedItemServerGrant& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_InstancedItemServerGrant& Lhs, const FPragma_Inventory_InstancedItemServerGrant& Rhs);

UENUM(BlueprintType, Category=Pragma)
enum class EPragma_Inventory_ItemServerGrantV1_ItemType : uint8
{
	Invalid,
	Instanced,
	Stackable,
};

USTRUCT(BlueprintType, Category=Pragma)
struct PRAGMASDK_API FPragma_Inventory_ItemServerGrantV1_Item
{
	GENERATED_BODY()

	FPragma_Inventory_ItemServerGrantV1_Item();
	~FPragma_Inventory_ItemServerGrantV1_Item();

	FPragma_Inventory_ItemServerGrantV1_Item(const FPragma_Inventory_ItemServerGrantV1_Item& Other);
	FPragma_Inventory_ItemServerGrantV1_Item& operator=(const FPragma_Inventory_ItemServerGrantV1_Item& Other);

    bool Equals(const FPragma_Inventory_ItemServerGrantV1_Item& Other) const;

	void Reset();

	EPragma_Inventory_ItemServerGrantV1_ItemType OneOfType() const { return Type; }

	const FPragma_Inventory_InstancedItemServerGrant& Instanced() const;
	const FPragma_Inventory_StackableItemGrant& Stackable() const;

    void SetInstanced(const FPragma_Inventory_InstancedItemServerGrant& Value);
    void SetStackable(const FPragma_Inventory_StackableItemGrant& Value);

	static bool SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
	static bool DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);

private:
	UPROPERTY()
	EPragma_Inventory_ItemServerGrantV1_ItemType Type { EPragma_Inventory_ItemServerGrantV1_ItemType::Invalid };

	union
	{
		TTypeCompatibleBytes<FPragma_Inventory_InstancedItemServerGrant> Instanced;
		TTypeCompatibleBytes<FPragma_Inventory_StackableItemGrant> Stackable;
	} Union{};
};
bool operator==(const FPragma_Inventory_ItemServerGrantV1_Item& Lhs, const FPragma_Inventory_ItemServerGrantV1_Item& Rhs);
bool operator!=(const FPragma_Inventory_ItemServerGrantV1_Item& Lhs, const FPragma_Inventory_ItemServerGrantV1_Item& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_ItemServerGrantV1
{
	GENERATED_BODY()

	UPROPERTY(Transient)
	FPragma_Inventory_ItemServerGrantV1_Item Item;

    PRAGMASDK_API static bool AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj);
    PRAGMASDK_API static bool AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue);
};
PRAGMASDK_API bool operator==(const FPragma_Inventory_ItemServerGrantV1& Lhs, const FPragma_Inventory_ItemServerGrantV1& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_ItemServerGrantV1& Lhs, const FPragma_Inventory_ItemServerGrantV1& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_InstancedItem
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString CatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FPragma_Inventory_ExtInstancedItem Ext;

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_InstancedItem& Lhs, const FPragma_Inventory_InstancedItem& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_InstancedItem& Lhs, const FPragma_Inventory_InstancedItem& Rhs);

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_Inventory_StackableItem
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString CatalogId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString InstanceId;

	UPROPERTY()
	int64 Amount{0};

};
PRAGMASDK_API bool operator==(const FPragma_Inventory_StackableItem& Lhs, const FPragma_Inventory_StackableItem& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_Inventory_StackableItem& Lhs, const FPragma_Inventory_StackableItem& Rhs);

