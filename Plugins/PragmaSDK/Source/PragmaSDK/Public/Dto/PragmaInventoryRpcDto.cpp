// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaInventoryRpcDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_Inventory_ResetClientInventoryCacheVersionV1Notification& Lhs, const FPragma_Inventory_ResetClientInventoryCacheVersionV1Notification& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_ResetClientInventoryCacheVersionV1Notification& Lhs, const FPragma_Inventory_ResetClientInventoryCacheVersionV1Notification& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ProviderEntitlementRecord& Lhs, const FPragma_Inventory_ProviderEntitlementRecord& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.FulfillmentId == Rhs.FulfillmentId
			&& Lhs.ProviderId == Rhs.ProviderId
			&& Lhs.ProviderEntitlementId == Rhs.ProviderEntitlementId
			&& Lhs.ProviderItemId == Rhs.ProviderItemId
			&& Lhs.ProviderEntitlementRecordStatus == Rhs.ProviderEntitlementRecordStatus
			&& Lhs.FulfilledTimestampMillis == Rhs.FulfilledTimestampMillis
;
}
bool operator!=(const FPragma_Inventory_ProviderEntitlementRecord& Lhs, const FPragma_Inventory_ProviderEntitlementRecord& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Response& Lhs, const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ProviderEntitlementRecords == Rhs.ProviderEntitlementRecords
;
}
bool operator!=(const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Response& Lhs, const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Request& Lhs, const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.PageIndex == Rhs.PageIndex
			&& Lhs.PageSize == Rhs.PageSize
;
}
bool operator!=(const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Request& Lhs, const FPragma_Inventory_GetProviderEntitlementHistoryPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DataOperations& Lhs, const FPragma_Inventory_DataOperations& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.StackableItemGrants == Rhs.StackableItemGrants
			&& Lhs.StackableItemUpdates == Rhs.StackableItemUpdates
			&& Lhs.InstancedItemServerGrants == Rhs.InstancedItemServerGrants
			&& Lhs.ServerInstancedItemUpdates == Rhs.ServerInstancedItemUpdates
			&& Lhs.InstancedItemServerDestroys == Rhs.InstancedItemServerDestroys
			&& Lhs.RewardGrants == Rhs.RewardGrants
			&& Lhs.IdempotencyKey == Rhs.IdempotencyKey
;
}
bool operator!=(const FPragma_Inventory_DataOperations& Lhs, const FPragma_Inventory_DataOperations& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Request& Lhs, const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.DataOperations == Rhs.DataOperations
;
}
bool operator!=(const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Request& Lhs, const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetInventoryPartnerV2Request& Lhs, const FPragma_Inventory_GetInventoryPartnerV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.TagsToInclude == Rhs.TagsToInclude
;
}
bool operator!=(const FPragma_Inventory_GetInventoryPartnerV2Request& Lhs, const FPragma_Inventory_GetInventoryPartnerV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DestroyItemsPartnerV2Request& Lhs, const FPragma_Inventory_DestroyItemsPartnerV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.ItemDestroys == Rhs.ItemDestroys
;
}
bool operator!=(const FPragma_Inventory_DestroyItemsPartnerV2Request& Lhs, const FPragma_Inventory_DestroyItemsPartnerV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GrantItemsPartnerV2Request& Lhs, const FPragma_Inventory_GrantItemsPartnerV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.ItemGrants == Rhs.ItemGrants
;
}
bool operator!=(const FPragma_Inventory_GrantItemsPartnerV2Request& Lhs, const FPragma_Inventory_GrantItemsPartnerV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SimulateRewardsV2Request& Lhs, const FPragma_Inventory_SimulateRewardsV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.RewardGrants == Rhs.RewardGrants
;
}
bool operator!=(const FPragma_Inventory_SimulateRewardsV2Request& Lhs, const FPragma_Inventory_SimulateRewardsV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InstancedDeltaV2& Lhs, const FPragma_Inventory_InstancedDeltaV2& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CatalogId == Rhs.CatalogId
			&& Lhs.Tags == Rhs.Tags
			&& Lhs.Operation == Rhs.Operation
			&& Lhs.Initial == Rhs.Initial
			&& Lhs.Final == Rhs.Final
;
}
bool operator!=(const FPragma_Inventory_InstancedDeltaV2& Lhs, const FPragma_Inventory_InstancedDeltaV2& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_StackableDelta& Lhs, const FPragma_Inventory_StackableDelta& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CatalogId == Rhs.CatalogId
			&& Lhs.Tags == Rhs.Tags
			&& Lhs.AmountChanged == Rhs.AmountChanged
;
}
bool operator!=(const FPragma_Inventory_StackableDelta& Lhs, const FPragma_Inventory_StackableDelta& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InventoryFullV1Data& Lhs, const FPragma_Inventory_InventoryFullV1Data& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Stackables == Rhs.Stackables
			&& Lhs.Instanced == Rhs.Instanced
			&& Lhs.Version == Rhs.Version
;
}
bool operator!=(const FPragma_Inventory_InventoryFullV1Data& Lhs, const FPragma_Inventory_InventoryFullV1Data& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ServiceInventoryData& Lhs, const FPragma_Inventory_ServiceInventoryData& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Hidden == Rhs.Hidden
			&& Lhs.Player == Rhs.Player
;
}
bool operator!=(const FPragma_Inventory_ServiceInventoryData& Lhs, const FPragma_Inventory_ServiceInventoryData& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetInventoryPartnerV2Response& Lhs, const FPragma_Inventory_GetInventoryPartnerV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Inventory == Rhs.Inventory
;
}
bool operator!=(const FPragma_Inventory_GetInventoryPartnerV2Response& Lhs, const FPragma_Inventory_GetInventoryPartnerV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetInventoryV2Response& Lhs, const FPragma_Inventory_GetInventoryV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Full == Rhs.Full
;
}
bool operator!=(const FPragma_Inventory_GetInventoryV2Response& Lhs, const FPragma_Inventory_GetInventoryV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GetInventoryV2Request& Lhs, const FPragma_Inventory_GetInventoryV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_GetInventoryV2Request& Lhs, const FPragma_Inventory_GetInventoryV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_CraftRequest& Lhs, const FPragma_Inventory_CraftRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Ext == Rhs.Ext
			&& Lhs.CraftingEntryId == Rhs.CraftingEntryId
			&& Lhs.ItemsToDestroy == Rhs.ItemsToDestroy
;
}
bool operator!=(const FPragma_Inventory_CraftRequest& Lhs, const FPragma_Inventory_CraftRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_CraftV1Request& Lhs, const FPragma_Inventory_CraftV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CraftRequest == Rhs.CraftRequest
;
}
bool operator!=(const FPragma_Inventory_CraftV1Request& Lhs, const FPragma_Inventory_CraftV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemsV0Request& Lhs, const FPragma_Inventory_UpdateItemsV0Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ItemUpdates == Rhs.ItemUpdates
;
}
bool operator!=(const FPragma_Inventory_UpdateItemsV0Request& Lhs, const FPragma_Inventory_UpdateItemsV0Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemsPartnerV2Request& Lhs, const FPragma_Inventory_UpdateItemsPartnerV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.Updates == Rhs.Updates
;
}
bool operator!=(const FPragma_Inventory_UpdateItemsPartnerV2Request& Lhs, const FPragma_Inventory_UpdateItemsPartnerV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemV4Request& Lhs, const FPragma_Inventory_UpdateItemV4Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ItemUpdate == Rhs.ItemUpdate
;
}
bool operator!=(const FPragma_Inventory_UpdateItemV4Request& Lhs, const FPragma_Inventory_UpdateItemV4Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ProviderEntitlementV1& Lhs, const FPragma_Inventory_ProviderEntitlementV1& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ProviderId == Rhs.ProviderId
			&& Lhs.ProviderItemId == Rhs.ProviderItemId
;
}
bool operator!=(const FPragma_Inventory_ProviderEntitlementV1& Lhs, const FPragma_Inventory_ProviderEntitlementV1& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SyncEntitlementsPartnerV1Response& Lhs, const FPragma_Inventory_SyncEntitlementsPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Fulfilled == Rhs.Fulfilled
			&& Lhs.Unfulfilled == Rhs.Unfulfilled
;
}
bool operator!=(const FPragma_Inventory_SyncEntitlementsPartnerV1Response& Lhs, const FPragma_Inventory_SyncEntitlementsPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SyncEntitlementsV1Response& Lhs, const FPragma_Inventory_SyncEntitlementsV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Fulfilled == Rhs.Fulfilled
			&& Lhs.Unfulfilled == Rhs.Unfulfilled
;
}
bool operator!=(const FPragma_Inventory_SyncEntitlementsV1Response& Lhs, const FPragma_Inventory_SyncEntitlementsV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ProviderData& Lhs, const FPragma_Inventory_ProviderData& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Provider == Rhs.Provider
			&& Lhs.AuthCode == Rhs.AuthCode
;
}
bool operator!=(const FPragma_Inventory_ProviderData& Lhs, const FPragma_Inventory_ProviderData& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SyncEntitlementsPartnerV1Request& Lhs, const FPragma_Inventory_SyncEntitlementsPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
			&& Lhs.ProviderData == Rhs.ProviderData
;
}
bool operator!=(const FPragma_Inventory_SyncEntitlementsPartnerV1Request& Lhs, const FPragma_Inventory_SyncEntitlementsPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SyncEntitlementsV1Request& Lhs, const FPragma_Inventory_SyncEntitlementsV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ProviderData == Rhs.ProviderData
;
}
bool operator!=(const FPragma_Inventory_SyncEntitlementsV1Request& Lhs, const FPragma_Inventory_SyncEntitlementsV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_FinalizeInProgressOrdersV1Response& Lhs, const FPragma_Inventory_FinalizeInProgressOrdersV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.GrantedBundleIds == Rhs.GrantedBundleIds
;
}
bool operator!=(const FPragma_Inventory_FinalizeInProgressOrdersV1Response& Lhs, const FPragma_Inventory_FinalizeInProgressOrdersV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_FinalizeInProgressOrdersV1Request& Lhs, const FPragma_Inventory_FinalizeInProgressOrdersV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_FinalizeInProgressOrdersV1Request& Lhs, const FPragma_Inventory_FinalizeInProgressOrdersV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_CancelOrderV1Response& Lhs, const FPragma_Inventory_CancelOrderV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_CancelOrderV1Response& Lhs, const FPragma_Inventory_CancelOrderV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_CancelOrderV1Request& Lhs, const FPragma_Inventory_CancelOrderV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.OrderId == Rhs.OrderId
;
}
bool operator!=(const FPragma_Inventory_CancelOrderV1Request& Lhs, const FPragma_Inventory_CancelOrderV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_FinalizeOrderV1Request& Lhs, const FPragma_Inventory_FinalizeOrderV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.OrderId == Rhs.OrderId
;
}
bool operator!=(const FPragma_Inventory_FinalizeOrderV1Request& Lhs, const FPragma_Inventory_FinalizeOrderV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InitializeOrderV1Response& Lhs, const FPragma_Inventory_InitializeOrderV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_InitializeOrderV1Response& Lhs, const FPragma_Inventory_InitializeOrderV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InitializeOrderV1Request& Lhs, const FPragma_Inventory_InitializeOrderV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ProductEntryId == Rhs.ProductEntryId
			&& Lhs.LanguageCode == Rhs.LanguageCode
			&& Lhs.Description == Rhs.Description
;
}
bool operator!=(const FPragma_Inventory_InitializeOrderV1Request& Lhs, const FPragma_Inventory_InitializeOrderV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateSummaryV0& Lhs, const FPragma_Inventory_UpdateSummaryV0& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Stackables == Rhs.Stackables
			&& Lhs.Instanced == Rhs.Instanced
;
}
bool operator!=(const FPragma_Inventory_UpdateSummaryV0& Lhs, const FPragma_Inventory_UpdateSummaryV0& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_SimulateRewardsV2Response& Lhs, const FPragma_Inventory_SimulateRewardsV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.InventoryDelta == Rhs.InventoryDelta
;
}
bool operator!=(const FPragma_Inventory_SimulateRewardsV2Response& Lhs, const FPragma_Inventory_SimulateRewardsV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InventorySegmentV1Data& Lhs, const FPragma_Inventory_InventorySegmentV1Data& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Stackables == Rhs.Stackables
			&& Lhs.Instanced == Rhs.Instanced
			&& Lhs.RemovedStackables == Rhs.RemovedStackables
			&& Lhs.RemovedInstanced == Rhs.RemovedInstanced
			&& Lhs.PreviousVersion == Rhs.PreviousVersion
			&& Lhs.Version == Rhs.Version
;
}
bool operator!=(const FPragma_Inventory_InventorySegmentV1Data& Lhs, const FPragma_Inventory_InventorySegmentV1Data& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_InventoryUpdatedV1Notification& Lhs, const FPragma_Inventory_InventoryUpdatedV1Notification& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
;
}
bool operator!=(const FPragma_Inventory_InventoryUpdatedV1Notification& Lhs, const FPragma_Inventory_InventoryUpdatedV1Notification& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_CraftV1Response& Lhs, const FPragma_Inventory_CraftV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
			&& Lhs.Errors == Rhs.Errors
;
}
bool operator!=(const FPragma_Inventory_CraftV1Response& Lhs, const FPragma_Inventory_CraftV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemsV0Response& Lhs, const FPragma_Inventory_UpdateItemsV0Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
;
}
bool operator!=(const FPragma_Inventory_UpdateItemsV0Response& Lhs, const FPragma_Inventory_UpdateItemsV0Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemsResponse& Lhs, const FPragma_Inventory_UpdateItemsResponse& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
;
}
bool operator!=(const FPragma_Inventory_UpdateItemsResponse& Lhs, const FPragma_Inventory_UpdateItemsResponse& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ServiceUpdateItemsResponse& Lhs, const FPragma_Inventory_ServiceUpdateItemsResponse& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Hidden == Rhs.Hidden
			&& Lhs.Player == Rhs.Player
;
}
bool operator!=(const FPragma_Inventory_ServiceUpdateItemsResponse& Lhs, const FPragma_Inventory_ServiceUpdateItemsResponse& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Response& Lhs, const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Updates == Rhs.Updates
;
}
bool operator!=(const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Response& Lhs, const FPragma_Inventory_ApplyInventoryOperationsPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DestroyItemsPartnerV2Response& Lhs, const FPragma_Inventory_DestroyItemsPartnerV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Updates == Rhs.Updates
;
}
bool operator!=(const FPragma_Inventory_DestroyItemsPartnerV2Response& Lhs, const FPragma_Inventory_DestroyItemsPartnerV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_GrantItemsPartnerV2Response& Lhs, const FPragma_Inventory_GrantItemsPartnerV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Updates == Rhs.Updates
;
}
bool operator!=(const FPragma_Inventory_GrantItemsPartnerV2Response& Lhs, const FPragma_Inventory_GrantItemsPartnerV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemsPartnerV2Response& Lhs, const FPragma_Inventory_UpdateItemsPartnerV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Updates == Rhs.Updates
;
}
bool operator!=(const FPragma_Inventory_UpdateItemsPartnerV2Response& Lhs, const FPragma_Inventory_UpdateItemsPartnerV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_FinalizeOrderV1Response& Lhs, const FPragma_Inventory_FinalizeOrderV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.MtxResponse == Rhs.MtxResponse
;
}
bool operator!=(const FPragma_Inventory_FinalizeOrderV1Response& Lhs, const FPragma_Inventory_FinalizeOrderV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_UpdateItemV4Response& Lhs, const FPragma_Inventory_UpdateItemV4Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
;
}
bool operator!=(const FPragma_Inventory_UpdateItemV4Response& Lhs, const FPragma_Inventory_UpdateItemV4Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_StorePurchaseV4Response& Lhs, const FPragma_Inventory_StorePurchaseV4Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Segment == Rhs.Segment
			&& Lhs.Delta == Rhs.Delta
;
}
bool operator!=(const FPragma_Inventory_StorePurchaseV4Response& Lhs, const FPragma_Inventory_StorePurchaseV4Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_PurchaseRequest& Lhs, const FPragma_Inventory_PurchaseRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Ext == Rhs.Ext
			&& Lhs.StoreId == Rhs.StoreId
			&& Lhs.StoreEntryId == Rhs.StoreEntryId
			&& Lhs.Amount == Rhs.Amount
			&& Lhs.InstancedItemsToPay == Rhs.InstancedItemsToPay
;
}
bool operator!=(const FPragma_Inventory_PurchaseRequest& Lhs, const FPragma_Inventory_PurchaseRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_StorePurchaseV4Request& Lhs, const FPragma_Inventory_StorePurchaseV4Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Data == Rhs.Data
;
}
bool operator!=(const FPragma_Inventory_StorePurchaseV4Request& Lhs, const FPragma_Inventory_StorePurchaseV4Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Response& Lhs, const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Response& Lhs, const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Request& Lhs, const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
;
}
bool operator!=(const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Request& Lhs, const FPragma_Inventory_ClearPlayerInventoryCachePartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DeletePlayerInventoryPartnerV1Response& Lhs, const FPragma_Inventory_DeletePlayerInventoryPartnerV1Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_DeletePlayerInventoryPartnerV1Response& Lhs, const FPragma_Inventory_DeletePlayerInventoryPartnerV1Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DeletePlayerInventoryPartnerV1Request& Lhs, const FPragma_Inventory_DeletePlayerInventoryPartnerV1Request& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.PlayerId == Rhs.PlayerId
;
}
bool operator!=(const FPragma_Inventory_DeletePlayerInventoryPartnerV1Request& Lhs, const FPragma_Inventory_DeletePlayerInventoryPartnerV1Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DeletePlayerInventoryV3Response& Lhs, const FPragma_Inventory_DeletePlayerInventoryV3Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_DeletePlayerInventoryV3Response& Lhs, const FPragma_Inventory_DeletePlayerInventoryV3Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Inventory_DeletePlayerInventoryV3Request& Lhs, const FPragma_Inventory_DeletePlayerInventoryV3Request& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Inventory_DeletePlayerInventoryV3Request& Lhs, const FPragma_Inventory_DeletePlayerInventoryV3Request& Rhs)
{
	return !(Lhs == Rhs);
}
