// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaGameInstanceExtDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_GameInstance_ExtPlayerConnectionDetails& Lhs, const FPragma_GameInstance_ExtPlayerConnectionDetails& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ExampleString == Rhs.ExampleString
			&& Lhs.ExampleLong == Rhs.ExampleLong
			&& Lhs.ExampleProto == Rhs.ExampleProto
			&& Lhs.Password == Rhs.Password
;
}
bool operator!=(const FPragma_GameInstance_ExtPlayerConnectionDetails& Lhs, const FPragma_GameInstance_ExtPlayerConnectionDetails& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtGameServerPlayer& Lhs, const FPragma_GameInstance_ExtGameServerPlayer& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.SelectedCharacter == Rhs.SelectedCharacter
			&& Lhs.SelectedCostumeCatalogId == Rhs.SelectedCostumeCatalogId
;
}
bool operator!=(const FPragma_GameInstance_ExtGameServerPlayer& Lhs, const FPragma_GameInstance_ExtGameServerPlayer& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtGameStart& Lhs, const FPragma_GameInstance_ExtGameStart& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.MatchDurationInMillis == Rhs.MatchDurationInMillis
;
}
bool operator!=(const FPragma_GameInstance_ExtGameStart& Lhs, const FPragma_GameInstance_ExtGameStart& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtAddedToGame& Lhs, const FPragma_GameInstance_ExtAddedToGame& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CurrentGamePhase == Rhs.CurrentGamePhase
;
}
bool operator!=(const FPragma_GameInstance_ExtAddedToGame& Lhs, const FPragma_GameInstance_ExtAddedToGame& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtGameEnded& Lhs, const FPragma_GameInstance_ExtGameEnded& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ActiveMissionsDelta == Rhs.ActiveMissionsDelta
			&& Lhs.GoldCoinsDelta == Rhs.GoldCoinsDelta
;
}
bool operator!=(const FPragma_GameInstance_ExtGameEnded& Lhs, const FPragma_GameInstance_ExtGameEnded& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtPlayerGameResult& Lhs, const FPragma_GameInstance_ExtPlayerGameResult& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CompletedMissionName == Rhs.CompletedMissionName
			&& Lhs.CompletedEvents.OrderIndependentCompareEqual(Rhs.CompletedEvents)
			&& Lhs.GainedXpAmount == Rhs.GainedXpAmount
;
}
bool operator!=(const FPragma_GameInstance_ExtPlayerGameResult& Lhs, const FPragma_GameInstance_ExtPlayerGameResult& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtEndGameRequest& Lhs, const FPragma_GameInstance_ExtEndGameRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_GameInstance_ExtEndGameRequest& Lhs, const FPragma_GameInstance_ExtEndGameRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtRemovedFromGame& Lhs, const FPragma_GameInstance_ExtRemovedFromGame& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ActiveMissionsDelta == Rhs.ActiveMissionsDelta
			&& Lhs.GoldCoinsDelta == Rhs.GoldCoinsDelta
;
}
bool operator!=(const FPragma_GameInstance_ExtRemovedFromGame& Lhs, const FPragma_GameInstance_ExtRemovedFromGame& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtRemovePlayer& Lhs, const FPragma_GameInstance_ExtRemovePlayer& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CompletedMissionName == Rhs.CompletedMissionName
			&& Lhs.CompletedEvents.OrderIndependentCompareEqual(Rhs.CompletedEvents)
;
}
bool operator!=(const FPragma_GameInstance_ExtRemovePlayer& Lhs, const FPragma_GameInstance_ExtRemovePlayer& Rhs)
{
	return !(Lhs == Rhs);
}

FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update() {}
FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::~FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update()
{
	Reset();
}

FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update(const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Other)
{
	*this = Other;
}

bool FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::Equals(const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Other) const
{
    if (OneOfType() != Other.OneOfType())
    {
        return false;
    }
	switch (OneOfType())
	{
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase:
		return AdvanceGamePhase() == Other.AdvanceGamePhase();
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::Invalid:
        return true;
	default:
		return false;
	}
}

FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::operator=(const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Other)
{
	Reset();
	Type = Other.OneOfType();
	switch (Other.OneOfType())
	{
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase:
		new(Union.AdvanceGamePhase.GetTypedPtr()) bool(Other.AdvanceGamePhase());
		break;
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::Invalid:
	default:
		break;
	}
	return *this;
}

void FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::Reset()
{
	switch (OneOfType())
	{
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase:
		// Primitive type, no destructor.
		break;
	case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::Invalid:
	default:
		break;
	}
	Type = EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::Invalid;
}

const bool& FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::AdvanceGamePhase() const {
	checkf(OneOfType() == EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase, TEXT("Failed to retrieve AdvanceGamePhase from FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.AdvanceGamePhase.GetTypedPtr();
}

void FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::SetAdvanceGamePhase(const bool& Value)
{
	Reset();
	Type = EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase;
	new(Union.AdvanceGamePhase.GetTypedPtr()) bool(Value);
}

bool FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& OneOf = static_cast<const FPragma_GameInstance_ExtUpdateGameInstanceRequest*>(Value)->Update;
	switch (OneOf.OneOfType())
	{
		case EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase:
			OutJsonObj->SetField("advanceGamePhase", PragmaJson::BoolToJsonValue(*OneOf.Union.AdvanceGamePhase.GetTypedPtr()));
			break;
		default:
			break;
	}
	// Per protobuf spec, it's ok to have empty oneof.
	return true;
}
bool FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& OutOneOf = static_cast<FPragma_GameInstance_ExtUpdateGameInstanceRequest*>(OutValue)->Update;
	if (JsonObj->HasField("advanceGamePhase"))
	{
		OutOneOf.Type = EPragma_GameInstance_ExtUpdateGameInstanceRequest_UpdateType::AdvanceGamePhase;
		new(OutOneOf.Union.AdvanceGamePhase.GetTypedPtr()) bool(PragmaJson::JsonValueToBool(JsonObj->TryGetField(TEXT("advanceGamePhase")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	// Per protobuf spec, oneofs have _at most_ one of the fields. None set is valid, so we always return true.
	return true;
}

bool operator==(const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Lhs, const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Rhs)
{
	return Lhs.Equals(Rhs);
}
bool operator!=(const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Lhs, const FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update& Rhs)
{
	return !(Lhs == Rhs);
}


bool FPragma_GameInstance_ExtUpdateGameInstanceRequest::AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	bool Success = true;
	Success &= FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::SerializeIntoParentJson(Value, OutJsonObj);
	return Success;
}

bool FPragma_GameInstance_ExtUpdateGameInstanceRequest::AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	bool Success = true;
	Success &= FPragma_GameInstance_ExtUpdateGameInstanceRequest_Update::DeserializeFromParentJson(JsonObj, OutValue);
	return Success;
}

bool operator==(const FPragma_GameInstance_ExtUpdateGameInstanceRequest& Lhs, const FPragma_GameInstance_ExtUpdateGameInstanceRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Update == Rhs.Update
;
}
bool operator!=(const FPragma_GameInstance_ExtUpdateGameInstanceRequest& Lhs, const FPragma_GameInstance_ExtUpdateGameInstanceRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_GameInstance_ExtRemovePlayersRequest& Lhs, const FPragma_GameInstance_ExtRemovePlayersRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_GameInstance_ExtRemovePlayersRequest& Lhs, const FPragma_GameInstance_ExtRemovePlayersRequest& Rhs)
{
	return !(Lhs == Rhs);
}
