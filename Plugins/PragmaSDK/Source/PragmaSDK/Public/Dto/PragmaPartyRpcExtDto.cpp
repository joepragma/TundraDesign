// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaPartyRpcExtDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_Party_ExtPrivatePlayer& Lhs, const FPragma_Party_ExtPrivatePlayer& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.VoipToken == Rhs.VoipToken
;
}
bool operator!=(const FPragma_Party_ExtPrivatePlayer& Lhs, const FPragma_Party_ExtPrivatePlayer& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Party_ExtBroadcastPlayer& Lhs, const FPragma_Party_ExtBroadcastPlayer& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.DesiredCharacter == Rhs.DesiredCharacter
			&& Lhs.SelectedCostumeCatalogId == Rhs.SelectedCostumeCatalogId
;
}
bool operator!=(const FPragma_Party_ExtBroadcastPlayer& Lhs, const FPragma_Party_ExtBroadcastPlayer& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Party_ExtBroadcastParty& Lhs, const FPragma_Party_ExtBroadcastParty& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.GameMode == Rhs.GameMode
			&& Lhs.MatchmakingStyle == Rhs.MatchmakingStyle
			&& Lhs.MatchDurationInMillis == Rhs.MatchDurationInMillis
			&& Lhs.MatchmakingKey == Rhs.MatchmakingKey
;
}
bool operator!=(const FPragma_Party_ExtBroadcastParty& Lhs, const FPragma_Party_ExtBroadcastParty& Rhs)
{
	return !(Lhs == Rhs);
}

FPragma_Party_ExtUpdatePartyRequest_Update::FPragma_Party_ExtUpdatePartyRequest_Update() {}
FPragma_Party_ExtUpdatePartyRequest_Update::~FPragma_Party_ExtUpdatePartyRequest_Update()
{
	Reset();
}

FPragma_Party_ExtUpdatePartyRequest_Update::FPragma_Party_ExtUpdatePartyRequest_Update(const FPragma_Party_ExtUpdatePartyRequest_Update& Other)
{
	*this = Other;
}

bool FPragma_Party_ExtUpdatePartyRequest_Update::Equals(const FPragma_Party_ExtUpdatePartyRequest_Update& Other) const
{
    if (OneOfType() != Other.OneOfType())
    {
        return false;
    }
	switch (OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode:
		return NewGameMode() == Other.NewGameMode();
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle:
		return MatchmakingStyle() == Other.MatchmakingStyle();
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis:
		return GameDurationInMillis() == Other.GameDurationInMillis();
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException:
		return ShouldCauseMatchmakingException() == Other.ShouldCauseMatchmakingException();
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::Invalid:
        return true;
	default:
		return false;
	}
}

FPragma_Party_ExtUpdatePartyRequest_Update& FPragma_Party_ExtUpdatePartyRequest_Update::operator=(const FPragma_Party_ExtUpdatePartyRequest_Update& Other)
{
	Reset();
	Type = Other.OneOfType();
	switch (Other.OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode:
		new(Union.NewGameMode.GetTypedPtr()) EPragma_Party_GameMode(Other.NewGameMode());
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle:
		new(Union.MatchmakingStyle.GetTypedPtr()) EPragma_Party_MatchmakingStyle(Other.MatchmakingStyle());
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis:
		new(Union.GameDurationInMillis.GetTypedPtr()) int64(Other.GameDurationInMillis());
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException:
		new(Union.ShouldCauseMatchmakingException.GetTypedPtr()) bool(Other.ShouldCauseMatchmakingException());
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::Invalid:
	default:
		break;
	}
	return *this;
}

void FPragma_Party_ExtUpdatePartyRequest_Update::Reset()
{
	switch (OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode:
		// Primitive type, no destructor.
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle:
		// Primitive type, no destructor.
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis:
		// Primitive type, no destructor.
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException:
		// Primitive type, no destructor.
		break;
	case EPragma_Party_ExtUpdatePartyRequest_UpdateType::Invalid:
	default:
		break;
	}
	Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::Invalid;
}

const EPragma_Party_GameMode& FPragma_Party_ExtUpdatePartyRequest_Update::NewGameMode() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode, TEXT("Failed to retrieve NewGameMode from FPragma_Party_ExtUpdatePartyRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.NewGameMode.GetTypedPtr();
}
const EPragma_Party_MatchmakingStyle& FPragma_Party_ExtUpdatePartyRequest_Update::MatchmakingStyle() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle, TEXT("Failed to retrieve MatchmakingStyle from FPragma_Party_ExtUpdatePartyRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.MatchmakingStyle.GetTypedPtr();
}
const int64& FPragma_Party_ExtUpdatePartyRequest_Update::GameDurationInMillis() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis, TEXT("Failed to retrieve GameDurationInMillis from FPragma_Party_ExtUpdatePartyRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.GameDurationInMillis.GetTypedPtr();
}
const bool& FPragma_Party_ExtUpdatePartyRequest_Update::ShouldCauseMatchmakingException() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException, TEXT("Failed to retrieve ShouldCauseMatchmakingException from FPragma_Party_ExtUpdatePartyRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.ShouldCauseMatchmakingException.GetTypedPtr();
}

void FPragma_Party_ExtUpdatePartyRequest_Update::SetNewGameMode(const EPragma_Party_GameMode& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode;
	new(Union.NewGameMode.GetTypedPtr()) EPragma_Party_GameMode(Value);
}
void FPragma_Party_ExtUpdatePartyRequest_Update::SetMatchmakingStyle(const EPragma_Party_MatchmakingStyle& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle;
	new(Union.MatchmakingStyle.GetTypedPtr()) EPragma_Party_MatchmakingStyle(Value);
}
void FPragma_Party_ExtUpdatePartyRequest_Update::SetGameDurationInMillis(const int64& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis;
	new(Union.GameDurationInMillis.GetTypedPtr()) int64(Value);
}
void FPragma_Party_ExtUpdatePartyRequest_Update::SetShouldCauseMatchmakingException(const bool& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException;
	new(Union.ShouldCauseMatchmakingException.GetTypedPtr()) bool(Value);
}

bool FPragma_Party_ExtUpdatePartyRequest_Update::SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	const FPragma_Party_ExtUpdatePartyRequest_Update& OneOf = static_cast<const FPragma_Party_ExtUpdatePartyRequest*>(Value)->Update;
	switch (OneOf.OneOfType())
	{
		case EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode:
			OutJsonObj->SetField("newGameMode", PragmaJson::EnumToJsonValue(*OneOf.Union.NewGameMode.GetTypedPtr()));
			break;
		case EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle:
			OutJsonObj->SetField("matchmakingStyle", PragmaJson::EnumToJsonValue(*OneOf.Union.MatchmakingStyle.GetTypedPtr()));
			break;
		case EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis:
			OutJsonObj->SetField("gameDurationInMillis", PragmaJson::Int64ToJsonValue(*OneOf.Union.GameDurationInMillis.GetTypedPtr()));
			break;
		case EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException:
			OutJsonObj->SetField("shouldCauseMatchmakingException", PragmaJson::BoolToJsonValue(*OneOf.Union.ShouldCauseMatchmakingException.GetTypedPtr()));
			break;
		default:
			break;
	}
	// Per protobuf spec, it's ok to have empty oneof.
	return true;
}
bool FPragma_Party_ExtUpdatePartyRequest_Update::DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	FPragma_Party_ExtUpdatePartyRequest_Update& OutOneOf = static_cast<FPragma_Party_ExtUpdatePartyRequest*>(OutValue)->Update;
	if (JsonObj->HasField("newGameMode"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::NewGameMode;
		new(OutOneOf.Union.NewGameMode.GetTypedPtr()) EPragma_Party_GameMode(PragmaJson::JsonValueToEnum<EPragma_Party_GameMode>(JsonObj->TryGetField(TEXT("newGameMode")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	if (JsonObj->HasField("matchmakingStyle"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::MatchmakingStyle;
		new(OutOneOf.Union.MatchmakingStyle.GetTypedPtr()) EPragma_Party_MatchmakingStyle(PragmaJson::JsonValueToEnum<EPragma_Party_MatchmakingStyle>(JsonObj->TryGetField(TEXT("matchmakingStyle")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	if (JsonObj->HasField("gameDurationInMillis"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::GameDurationInMillis;
		new(OutOneOf.Union.GameDurationInMillis.GetTypedPtr()) int64(PragmaJson::JsonValueToInt64(JsonObj->TryGetField(TEXT("gameDurationInMillis")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	if (JsonObj->HasField("shouldCauseMatchmakingException"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyRequest_UpdateType::ShouldCauseMatchmakingException;
		new(OutOneOf.Union.ShouldCauseMatchmakingException.GetTypedPtr()) bool(PragmaJson::JsonValueToBool(JsonObj->TryGetField(TEXT("shouldCauseMatchmakingException")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	// Per protobuf spec, oneofs have _at most_ one of the fields. None set is valid, so we always return true.
	return true;
}

bool operator==(const FPragma_Party_ExtUpdatePartyRequest_Update& Lhs, const FPragma_Party_ExtUpdatePartyRequest_Update& Rhs)
{
	return Lhs.Equals(Rhs);
}
bool operator!=(const FPragma_Party_ExtUpdatePartyRequest_Update& Lhs, const FPragma_Party_ExtUpdatePartyRequest_Update& Rhs)
{
	return !(Lhs == Rhs);
}


bool FPragma_Party_ExtUpdatePartyRequest::AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	bool Success = true;
	Success &= FPragma_Party_ExtUpdatePartyRequest_Update::SerializeIntoParentJson(Value, OutJsonObj);
	return Success;
}

bool FPragma_Party_ExtUpdatePartyRequest::AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	bool Success = true;
	Success &= FPragma_Party_ExtUpdatePartyRequest_Update::DeserializeFromParentJson(JsonObj, OutValue);
	return Success;
}

bool operator==(const FPragma_Party_ExtUpdatePartyRequest& Lhs, const FPragma_Party_ExtUpdatePartyRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Update == Rhs.Update
;
}
bool operator!=(const FPragma_Party_ExtUpdatePartyRequest& Lhs, const FPragma_Party_ExtUpdatePartyRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Party_ExtPlayerJoinRequest& Lhs, const FPragma_Party_ExtPlayerJoinRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Party_ExtPlayerJoinRequest& Lhs, const FPragma_Party_ExtPlayerJoinRequest& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Party_ExtCreateRequest& Lhs, const FPragma_Party_ExtCreateRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.MatchmakingKey == Rhs.MatchmakingKey
;
}
bool operator!=(const FPragma_Party_ExtCreateRequest& Lhs, const FPragma_Party_ExtCreateRequest& Rhs)
{
	return !(Lhs == Rhs);
}

FPragma_Party_ExtUpdatePartyPlayerRequest_Update::FPragma_Party_ExtUpdatePartyPlayerRequest_Update() {}
FPragma_Party_ExtUpdatePartyPlayerRequest_Update::~FPragma_Party_ExtUpdatePartyPlayerRequest_Update()
{
	Reset();
}

FPragma_Party_ExtUpdatePartyPlayerRequest_Update::FPragma_Party_ExtUpdatePartyPlayerRequest_Update(const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Other)
{
	*this = Other;
}

bool FPragma_Party_ExtUpdatePartyPlayerRequest_Update::Equals(const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Other) const
{
    if (OneOfType() != Other.OneOfType())
    {
        return false;
    }
	switch (OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection:
		return NewCharacterSelection() == Other.NewCharacterSelection();
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId:
		return NewCostumeCatalogId() == Other.NewCostumeCatalogId();
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::Invalid:
        return true;
	default:
		return false;
	}
}

FPragma_Party_ExtUpdatePartyPlayerRequest_Update& FPragma_Party_ExtUpdatePartyPlayerRequest_Update::operator=(const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Other)
{
	Reset();
	Type = Other.OneOfType();
	switch (Other.OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection:
		new(Union.NewCharacterSelection.GetTypedPtr()) EPragma_Party_Character(Other.NewCharacterSelection());
		break;
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId:
		new(Union.NewCostumeCatalogId.GetTypedPtr()) FString(Other.NewCostumeCatalogId());
		break;
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::Invalid:
	default:
		break;
	}
	return *this;
}

void FPragma_Party_ExtUpdatePartyPlayerRequest_Update::Reset()
{
	switch (OneOfType())
	{
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection:
		// Primitive type, no destructor.
		break;
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId:
		Union.NewCostumeCatalogId.GetTypedPtr()->~FString();
		break;
	case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::Invalid:
	default:
		break;
	}
	Type = EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::Invalid;
}

const EPragma_Party_Character& FPragma_Party_ExtUpdatePartyPlayerRequest_Update::NewCharacterSelection() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection, TEXT("Failed to retrieve NewCharacterSelection from FPragma_Party_ExtUpdatePartyPlayerRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.NewCharacterSelection.GetTypedPtr();
}
const FString& FPragma_Party_ExtUpdatePartyPlayerRequest_Update::NewCostumeCatalogId() const {
	checkf(OneOfType() == EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId, TEXT("Failed to retrieve NewCostumeCatalogId from FPragma_Party_ExtUpdatePartyPlayerRequest_Update. Check the OneOfType() before accessing the value."));
	return *Union.NewCostumeCatalogId.GetTypedPtr();
}

void FPragma_Party_ExtUpdatePartyPlayerRequest_Update::SetNewCharacterSelection(const EPragma_Party_Character& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection;
	new(Union.NewCharacterSelection.GetTypedPtr()) EPragma_Party_Character(Value);
}
void FPragma_Party_ExtUpdatePartyPlayerRequest_Update::SetNewCostumeCatalogId(const FString& Value)
{
	Reset();
	Type = EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId;
	new(Union.NewCostumeCatalogId.GetTypedPtr()) FString(Value);
}

bool FPragma_Party_ExtUpdatePartyPlayerRequest_Update::SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& OneOf = static_cast<const FPragma_Party_ExtUpdatePartyPlayerRequest*>(Value)->Update;
	switch (OneOf.OneOfType())
	{
		case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection:
			OutJsonObj->SetField("newCharacterSelection", PragmaJson::EnumToJsonValue(*OneOf.Union.NewCharacterSelection.GetTypedPtr()));
			break;
		case EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId:
			OutJsonObj->SetField("newCostumeCatalogId", PragmaJson::StringToJsonValue(*OneOf.Union.NewCostumeCatalogId.GetTypedPtr()));
			break;
		default:
			break;
	}
	// Per protobuf spec, it's ok to have empty oneof.
	return true;
}
bool FPragma_Party_ExtUpdatePartyPlayerRequest_Update::DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	FPragma_Party_ExtUpdatePartyPlayerRequest_Update& OutOneOf = static_cast<FPragma_Party_ExtUpdatePartyPlayerRequest*>(OutValue)->Update;
	if (JsonObj->HasField("newCharacterSelection"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCharacterSelection;
		new(OutOneOf.Union.NewCharacterSelection.GetTypedPtr()) EPragma_Party_Character(PragmaJson::JsonValueToEnum<EPragma_Party_Character>(JsonObj->TryGetField(TEXT("newCharacterSelection")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	if (JsonObj->HasField("newCostumeCatalogId"))
	{
		OutOneOf.Type = EPragma_Party_ExtUpdatePartyPlayerRequest_UpdateType::NewCostumeCatalogId;
		new(OutOneOf.Union.NewCostumeCatalogId.GetTypedPtr()) FString(PragmaJson::JsonValueToString(JsonObj->TryGetField(TEXT("newCostumeCatalogId")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	// Per protobuf spec, oneofs have _at most_ one of the fields. None set is valid, so we always return true.
	return true;
}

bool operator==(const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Lhs, const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Rhs)
{
	return Lhs.Equals(Rhs);
}
bool operator!=(const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Lhs, const FPragma_Party_ExtUpdatePartyPlayerRequest_Update& Rhs)
{
	return !(Lhs == Rhs);
}


bool FPragma_Party_ExtUpdatePartyPlayerRequest::AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	bool Success = true;
	Success &= FPragma_Party_ExtUpdatePartyPlayerRequest_Update::SerializeIntoParentJson(Value, OutJsonObj);
	return Success;
}

bool FPragma_Party_ExtUpdatePartyPlayerRequest::AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	bool Success = true;
	Success &= FPragma_Party_ExtUpdatePartyPlayerRequest_Update::DeserializeFromParentJson(JsonObj, OutValue);
	return Success;
}

bool operator==(const FPragma_Party_ExtUpdatePartyPlayerRequest& Lhs, const FPragma_Party_ExtUpdatePartyPlayerRequest& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CurrentInventoryVersion == Rhs.CurrentInventoryVersion
			&& Lhs.Update == Rhs.Update
;
}
bool operator!=(const FPragma_Party_ExtUpdatePartyPlayerRequest& Lhs, const FPragma_Party_ExtUpdatePartyPlayerRequest& Rhs)
{
	return !(Lhs == Rhs);
}
