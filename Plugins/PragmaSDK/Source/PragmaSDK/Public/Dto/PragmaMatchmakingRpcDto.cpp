// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaMatchmakingRpcDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_Matchmaking_MatchmakingQueueKey& Lhs, const FPragma_Matchmaking_MatchmakingQueueKey& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.ExtMatchmakingKey == Rhs.ExtMatchmakingKey
			&& Lhs.GameServerVersion == Rhs.GameServerVersion
;
}
bool operator!=(const FPragma_Matchmaking_MatchmakingQueueKey& Lhs, const FPragma_Matchmaking_MatchmakingQueueKey& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_MatchmakingFailureV1Notification& Lhs, const FPragma_Matchmaking_MatchmakingFailureV1Notification& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Reason == Rhs.Reason
;
}
bool operator!=(const FPragma_Matchmaking_MatchmakingFailureV1Notification& Lhs, const FPragma_Matchmaking_MatchmakingFailureV1Notification& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_QueueInfoV2& Lhs, const FPragma_Matchmaking_QueueInfoV2& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.MatchmakingQueueKey == Rhs.MatchmakingQueueKey
			&& Lhs.PartiesInQueue == Rhs.PartiesInQueue
			&& Lhs.PlayersInQueue == Rhs.PlayersInQueue
			&& Lhs.MatchablesInQueue == Rhs.MatchablesInQueue
			&& Lhs.GameInstancesInQueue == Rhs.GameInstancesInQueue
;
}
bool operator!=(const FPragma_Matchmaking_QueueInfoV2& Lhs, const FPragma_Matchmaking_QueueInfoV2& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_GetMatchmakingInfoV2Response& Lhs, const FPragma_Matchmaking_GetMatchmakingInfoV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.QueueInfo == Rhs.QueueInfo
;
}
bool operator!=(const FPragma_Matchmaking_GetMatchmakingInfoV2Response& Lhs, const FPragma_Matchmaking_GetMatchmakingInfoV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_GetMatchmakingInfoV2Request& Lhs, const FPragma_Matchmaking_GetMatchmakingInfoV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Matchmaking_GetMatchmakingInfoV2Request& Lhs, const FPragma_Matchmaking_GetMatchmakingInfoV2Request& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_LeaveMatchmakingV2Response& Lhs, const FPragma_Matchmaking_LeaveMatchmakingV2Response& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Matchmaking_LeaveMatchmakingV2Response& Lhs, const FPragma_Matchmaking_LeaveMatchmakingV2Response& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Matchmaking_LeaveMatchmakingV2Request& Lhs, const FPragma_Matchmaking_LeaveMatchmakingV2Request& Rhs)
{
	return true // Initial true allows simpler codegen.
;
}
bool operator!=(const FPragma_Matchmaking_LeaveMatchmakingV2Request& Lhs, const FPragma_Matchmaking_LeaveMatchmakingV2Request& Rhs)
{
	return !(Lhs == Rhs);
}
