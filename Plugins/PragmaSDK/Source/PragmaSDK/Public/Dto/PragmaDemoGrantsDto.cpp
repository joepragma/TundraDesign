// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.cpp.mustache
// </auto-generated>

#include "PragmaDemoGrantsDto.h"
#include "CoreMinimal.h"
#include "PragmaJson.h"



bool operator==(const FPragma_Ext_DemoStackableItemGrant& Lhs, const FPragma_Ext_DemoStackableItemGrant& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CatalogId == Rhs.CatalogId
			&& Lhs.Amount == Rhs.Amount
;
}
bool operator!=(const FPragma_Ext_DemoStackableItemGrant& Lhs, const FPragma_Ext_DemoStackableItemGrant& Rhs)
{
	return !(Lhs == Rhs);
}


bool operator==(const FPragma_Ext_DemoInstancedItemGrant& Lhs, const FPragma_Ext_DemoInstancedItemGrant& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.CatalogId == Rhs.CatalogId
;
}
bool operator!=(const FPragma_Ext_DemoInstancedItemGrant& Lhs, const FPragma_Ext_DemoInstancedItemGrant& Rhs)
{
	return !(Lhs == Rhs);
}

FPragma_Ext_DemoItemGrant_Item::FPragma_Ext_DemoItemGrant_Item() {}
FPragma_Ext_DemoItemGrant_Item::~FPragma_Ext_DemoItemGrant_Item()
{
	Reset();
}

FPragma_Ext_DemoItemGrant_Item::FPragma_Ext_DemoItemGrant_Item(const FPragma_Ext_DemoItemGrant_Item& Other)
{
	*this = Other;
}

bool FPragma_Ext_DemoItemGrant_Item::Equals(const FPragma_Ext_DemoItemGrant_Item& Other) const
{
    if (OneOfType() != Other.OneOfType())
    {
        return false;
    }
	switch (OneOfType())
	{
	case EPragma_Ext_DemoItemGrant_ItemType::Instanced:
		return Instanced() == Other.Instanced();
	case EPragma_Ext_DemoItemGrant_ItemType::Stackable:
		return Stackable() == Other.Stackable();
	case EPragma_Ext_DemoItemGrant_ItemType::Invalid:
        return true;
	default:
		return false;
	}
}

FPragma_Ext_DemoItemGrant_Item& FPragma_Ext_DemoItemGrant_Item::operator=(const FPragma_Ext_DemoItemGrant_Item& Other)
{
	Reset();
	Type = Other.OneOfType();
	switch (Other.OneOfType())
	{
	case EPragma_Ext_DemoItemGrant_ItemType::Instanced:
		new(Union.Instanced.GetTypedPtr()) FPragma_Ext_DemoInstancedItemGrant(Other.Instanced());
		break;
	case EPragma_Ext_DemoItemGrant_ItemType::Stackable:
		new(Union.Stackable.GetTypedPtr()) FPragma_Ext_DemoStackableItemGrant(Other.Stackable());
		break;
	case EPragma_Ext_DemoItemGrant_ItemType::Invalid:
	default:
		break;
	}
	return *this;
}

void FPragma_Ext_DemoItemGrant_Item::Reset()
{
	switch (OneOfType())
	{
	case EPragma_Ext_DemoItemGrant_ItemType::Instanced:
		Union.Instanced.GetTypedPtr()->~FPragma_Ext_DemoInstancedItemGrant();
		break;
	case EPragma_Ext_DemoItemGrant_ItemType::Stackable:
		Union.Stackable.GetTypedPtr()->~FPragma_Ext_DemoStackableItemGrant();
		break;
	case EPragma_Ext_DemoItemGrant_ItemType::Invalid:
	default:
		break;
	}
	Type = EPragma_Ext_DemoItemGrant_ItemType::Invalid;
}

const FPragma_Ext_DemoInstancedItemGrant& FPragma_Ext_DemoItemGrant_Item::Instanced() const {
	checkf(OneOfType() == EPragma_Ext_DemoItemGrant_ItemType::Instanced, TEXT("Failed to retrieve Instanced from FPragma_Ext_DemoItemGrant_Item. Check the OneOfType() before accessing the value."));
	return *Union.Instanced.GetTypedPtr();
}
const FPragma_Ext_DemoStackableItemGrant& FPragma_Ext_DemoItemGrant_Item::Stackable() const {
	checkf(OneOfType() == EPragma_Ext_DemoItemGrant_ItemType::Stackable, TEXT("Failed to retrieve Stackable from FPragma_Ext_DemoItemGrant_Item. Check the OneOfType() before accessing the value."));
	return *Union.Stackable.GetTypedPtr();
}

void FPragma_Ext_DemoItemGrant_Item::SetInstanced(const FPragma_Ext_DemoInstancedItemGrant& Value)
{
	Reset();
	Type = EPragma_Ext_DemoItemGrant_ItemType::Instanced;
	new(Union.Instanced.GetTypedPtr()) FPragma_Ext_DemoInstancedItemGrant(Value);
}
void FPragma_Ext_DemoItemGrant_Item::SetStackable(const FPragma_Ext_DemoStackableItemGrant& Value)
{
	Reset();
	Type = EPragma_Ext_DemoItemGrant_ItemType::Stackable;
	new(Union.Stackable.GetTypedPtr()) FPragma_Ext_DemoStackableItemGrant(Value);
}

bool FPragma_Ext_DemoItemGrant_Item::SerializeIntoParentJson(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	const FPragma_Ext_DemoItemGrant_Item& OneOf = static_cast<const FPragma_Ext_DemoItemGrant*>(Value)->Item;
	switch (OneOf.OneOfType())
	{
		case EPragma_Ext_DemoItemGrant_ItemType::Instanced:
			OutJsonObj->SetField("instanced", PragmaJson::StructToJsonValue(*OneOf.Union.Instanced.GetTypedPtr()));
			break;
		case EPragma_Ext_DemoItemGrant_ItemType::Stackable:
			OutJsonObj->SetField("stackable", PragmaJson::StructToJsonValue(*OneOf.Union.Stackable.GetTypedPtr()));
			break;
		default:
			break;
	}
	// Per protobuf spec, it's ok to have empty oneof.
	return true;
}
bool FPragma_Ext_DemoItemGrant_Item::DeserializeFromParentJson(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	FPragma_Ext_DemoItemGrant_Item& OutOneOf = static_cast<FPragma_Ext_DemoItemGrant*>(OutValue)->Item;
	if (JsonObj->HasField("instanced"))
	{
		OutOneOf.Type = EPragma_Ext_DemoItemGrant_ItemType::Instanced;
		new(OutOneOf.Union.Instanced.GetTypedPtr()) FPragma_Ext_DemoInstancedItemGrant(PragmaJson::JsonValueToStruct<FPragma_Ext_DemoInstancedItemGrant>(JsonObj->TryGetField(TEXT("instanced")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	if (JsonObj->HasField("stackable"))
	{
		OutOneOf.Type = EPragma_Ext_DemoItemGrant_ItemType::Stackable;
		new(OutOneOf.Union.Stackable.GetTypedPtr()) FPragma_Ext_DemoStackableItemGrant(PragmaJson::JsonValueToStruct<FPragma_Ext_DemoStackableItemGrant>(JsonObj->TryGetField(TEXT("stackable")).ToSharedRef()));
		return true; // return to short circuit any other checks.
	}
	// Per protobuf spec, oneofs have _at most_ one of the fields. None set is valid, so we always return true.
	return true;
}

bool operator==(const FPragma_Ext_DemoItemGrant_Item& Lhs, const FPragma_Ext_DemoItemGrant_Item& Rhs)
{
	return Lhs.Equals(Rhs);
}
bool operator!=(const FPragma_Ext_DemoItemGrant_Item& Lhs, const FPragma_Ext_DemoItemGrant_Item& Rhs)
{
	return !(Lhs == Rhs);
}


bool FPragma_Ext_DemoItemGrant::AddonSerializer(const void* Value, TSharedRef<FJsonObject>& OutJsonObj)
{
	bool Success = true;
	Success &= FPragma_Ext_DemoItemGrant_Item::SerializeIntoParentJson(Value, OutJsonObj);
	return Success;
}

bool FPragma_Ext_DemoItemGrant::AddonDeserializer(const TSharedRef<FJsonObject>& JsonObj, void* OutValue)
{
	bool Success = true;
	Success &= FPragma_Ext_DemoItemGrant_Item::DeserializeFromParentJson(JsonObj, OutValue);
	return Success;
}

bool operator==(const FPragma_Ext_DemoItemGrant& Lhs, const FPragma_Ext_DemoItemGrant& Rhs)
{
	return true // Initial true allows simpler codegen.
			&& Lhs.Item == Rhs.Item
;
}
bool operator!=(const FPragma_Ext_DemoItemGrant& Lhs, const FPragma_Ext_DemoItemGrant& Rhs)
{
	return !(Lhs == Rhs);
}
