// <auto-generated>
//      Generated by Pragma Platform protoc-custom-plugins sdk-unreal4 target.  DO NOT EDIT!
//      Source template: unreal4/Dto.h.mustache
// </auto-generated>
#pragma once

#include "CoreMinimal.h"
#include "Dom/JsonObject.h"
#include "Dto/PragmaTypesDto.h"
#include "Dto/PragmaOptionsDto.h"

#include "PragmaErrorsDto.generated.h"

// Forward declarations.
struct FPragma_BatchRequestFailure;

//
// Source protos:
// shared/errors.proto
//


//
// Enums.
//

UENUM()
enum class EPragma_PlatformError
{
	UNKNOWN_ERROR = 0,
	SessionService_SessionUnavailable = 1,
	SessionService_FailedToRoute = 2,
	SessionService_WrongSessionType = 4,
	SessionService_SessionNotFound = 5,
	SessionService_TokenDoesNotMatchCurrentSession = 6,
	AccountService_Error = 101,
	AccountService_NotFound = 102,
	AccountService_Unauthorized = 103,
	AccountService_Unverified = 104,
	AccountService_BadRequest = 105,
	AccountService_IdProviderMissing = 106,
	AccountService_PlayerGroupNameCollision = 107,
	AccountService_DuplicateIdProvider = 110,
	AccountService_PlayerGroupValidation = 111,
	AccountService_MissingFilter = 112,
	AccountService_EmailSenderRequestError = 113,
	AccountService_EmailSenderServerError = 114,
	AccountService_PlayerGroupCouldNotRemove = 115,
	AccountService_IdProviderAlreadyAssociated = 116,
	AccountService_AccountAlreadyBoundToProviderType = 117,
	AccountService_AlreadyExists = 119,
	AccountService_RanOutOfDiscriminators = 120,
	AccountService_AccountTagValidation = 121,
	AccountService_TokenExpired = 122,
	AccountService_TokenSignatureVerificationFailed = 123,
	AccountService_TokenDecodeFailed = 124,
	AccountService_IdProviderAuthenticationDisabled = 126,
	AccountService_InvalidIdProvider = 127,
	AccountService_IdProviderLinkingDisabled = 128,
	AccountService_CannotUnlinkOnlyIdProvider = 129,
	AccountService_IdProviderUnexpectedResponse = 130,
	AccountService_DisplayNameUpdateNotAllowed = 131,
	AccountService_JwtKeyNotFound = 132,
	GameInstanceService_CapacityRequestFailed = 401,
	GameInstanceService_UnknownGameInstanceId = 403,
	GameInstanceService_PlayerNotInGameInstance = 405,
	GameInstanceService_GameInstanceAlreadyInMatchmaking = 406,
	GameInstanceService_MissingPlayerConnectionDetails = 407,
	GameInstanceService_CannotDeclineReconnect = 408,
	GameInstanceService_FailedToUpdateMatchmakingGameInstancePlayers = 409,
	GameInstanceService_FailedToLeaveMatchmaking = 410,
	GameInstanceService_GameInstanceNotInMatchmaking = 411,
	GameInstanceService_FailedToUpdateMatchmakingGameInstance = 412,
	InventoryService_GetError = 501,
	InventoryService_StoreNotFound = 502,
	InventoryService_StoreEntryNotFound = 503,
	InventoryService_InsufficientCurrencyError = 504,
	InventoryService_RequirementsNotMetError = 505,
	InventoryService_GrantError = 506,
	InventoryService_StackLimitExceeded = 507,
	InventoryService_Overflow = 508,
	InventoryService_InstanceNotFound = 509,
	InventoryService_CatalogIdNotFound = 510,
	InventoryService_PlayerIdNotFound = 511,
	InventoryService_CatalogNotFound = 512,
	InventoryService_DeleteAllConfigNotEnabled = 513,
	InventoryService_PlayerDataMigrationFailed = 514,
	InventoryService_DeletePlayerInventoryConfigNotEnabled = 515,
	InventoryService_DeletePlayerInventoryFailed = 516,
	InventoryService_ApplyContentChangesDevelopmentOnly = 517,
	InventoryService_CountContentVersionFailed = 518,
	InventoryService_CraftingEntryNotFound = 519,
	InventoryService_DestroyItemsFailed = 520,
	InventoryService_ApplyContentChangesError = 521,
	InventoryService_CrossContentValidationError = 522,
	InventoryService_InvalidContentData = 523,
	InventoryService_ItemBundleNotFound = 524,
	InventoryService_InvalidContentType = 525,
	InventoryService_PlanContentChangesError = 526,
	InventoryService_DoubleFulfillError = 527,
	InventoryService_EntitlementProviderNotFound = 528,
	InventoryService_EntitlementMappingConfigurationError = 529,
	InventoryService_ContentNotFound = 530,
	InventoryService_EntitlementProviderError = 531,
	MatchmakingService_QueueNotFound = 601,
	MatchmakingService_MatchAlreadyStarted = 602,
	MatchmakingService_PlayerAlreadyInQueue = 603,
	MatchmakingService_PartyTooBig = 604,
	MatchmakingService_InfoNotAvailable = 605,
	MatchmakingService_PluginException = 606,
	MatchmakingService_PlayerUpdateFailed = 607,
	MatchmakingService_PartyUpdateFailed = 608,
	MatchCapacityService_MultiplayAllocationFailed = 801,
	MatchCapacityService_MultiplayAllocateForError = 802,
	MatchCapacityService_UnsuccessfulResponse = 803,
	MatchCapacityService_AllocationError = 804,
	MatchCapacityService_UnparseableResponse = 805,
	MatchCapacityService_UnexpectedResponse = 806,
	MatchCapacityService_GameVersionMismatch = 807,
	MatchCapacityService_ServerNotRequested = 808,
	MatchCapacityService_InvalidLauncher = 809,
	MatchCapacityService_MultiplayRegionIdNotDefined = 810,
	MatchCapacityService_GameServerZoneMismatch = 811,
	FleetService_GameServerVersionMismatch = 812,
	FleetService_ServerPoolNotFound = 813,
	FleetService_ServerPoolManagementPolicyConfigNotFound = 814,
	FleetService_AllocationError = 815,
	FleetService_InvalidLauncher = 816,
	FleetService_MultiplayRegionIdNotDefined = 817,
	FleetService_MultiplayAllocateForError = 818,
	FleetService_UnexpectedResponse = 819,
	FleetService_UnparseableResponse = 820,
	FleetService_UnsuccessfulResponse = 821,
	PartyService_PartyNotFound = 901,
	PartyService_AlreadyInParty = 902,
	PartyService_InvalidState = 903,
	PartyService_NotInParty = 904,
	PartyService_PlayerNotLeader = 905,
	PartyService_PlayersNotReady = 906,
	PartyService_FailedToEnterMatchmaking = 907,
	PartyService_InviteNotFound = 910,
	PartyService_PartyFull = 911,
	PartyService_InvalidSession = 912,
	PartyService_PartyClientVersionMismatch = 916,
	PartyService_OverrideGameServerVersionDisabled = 917,
	PartyService_GameServerNoLongerCompatible = 918,
	PartyService_LeavePartyFailed = 919,
	PartyService_PlayerNotFound = 920,
	PartyService_PlayerIsKicked = 921,
	PartyService_CanNotKickSelf = 922,
	PartyService_PlayersAlreadyInGameLoop = 923,
	PartyService_PlayerIsLeader = 924,
	PartyService_FailedToLeaveMatchmaking = 925,
	GameManagementService_FailedToSetAccessMode = 1001,
	GameManagementService_LimitedAccessEventNotFound = 1002,
	GameManagementService_BadRequest = 1003,
	GameManagementService_LimitedAccessEventNameMissing = 1004,
	GameManagementService_LimitedAccessEventTimeInvalid = 1005,
	GameManagementService_GameShardInvalid = 1006,
	GameManagementService_LimitedAccessEventCannotModifyExistingEvent = 1007,
	GameManagementService_FailedToRetrieveGameData = 1008,
	GameManagementService_GameIdNotFound = 1010,
	GameManagementService_DuplicateGameShardName = 1011,
	GameManagementService_InvalidFilter = 1012,
	TelemetryService_FailedToPersistEvent = 1101,
	TelemetryService_UnsupportedOperation = 1102,
	Database_Error = 1201,
	Service_OperatingError = 1202,
	Serialization_Error = 1203,
	PaymentService_MissingSteamProviderAccount = 1301,
	PaymentService_InvalidSteamIdForOrderId = 1302,
	PaymentService_InvalidProductEntry = 1303,
	PaymentService_SteamApiError = 1304,
	PaymentService_SteamApiUnexpectedError = 1305,
	PaymentService_InvalidOrderState = 1306,
	PaymentService_BadRequest = 1307,
	PaymentService_SteamApiFailureResult = 1308,
	PaymentService_SteamTransactionFailure = 1309,
	PaymentService_PaymentPluginNotConfigured = 1310,
	PaymentService_SteamLockedAccount = 1311,
	PlayerDataService_InvalidSubServiceRpc = 1401,
	PlayerDataService_InvalidUniqueEntity = 1402,
	DataRightsService_RequestAlreadyInProgress = 1501,
	DataRightsService_UnexpectedRequestType = 1502,
	DataRightsService_ErrorFetchingAccountData = 1503,
	DataRightsService_RequestNotFound = 1504,
	FriendService_InternalError = 1601,
};

//
// Messages.
//

USTRUCT(BlueprintType, Category=Pragma)
struct FPragma_BatchRequestFailure
{
	GENERATED_BODY()

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	FString PragmaId;

	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category=Pragma)
	EPragma_PlatformError Error{static_cast<EPragma_PlatformError>(0)};

};
PRAGMASDK_API bool operator==(const FPragma_BatchRequestFailure& Lhs, const FPragma_BatchRequestFailure& Rhs);
PRAGMASDK_API bool operator!=(const FPragma_BatchRequestFailure& Lhs, const FPragma_BatchRequestFailure& Rhs);

